{"version":3,"sources":["model/Model.js","boundary/Boundary.js","controller/Controller.js","Mobile.js","Desktop.js","App.js","model/Puzzle.js","serviceWorker.js","index.js"],"names":["Coordinate","row","column","Object","classCallCheck","this","MoveType","dr","dc","label","deltar","deltac","createClass","key","value","s","Down","Up","Left","Right","NoMove","Piece","w","h","isWinner","width","height","col","direction","other","_regeneratorRuntime","mark","coordinates","r","c","wrap","_context","prev","next","stop","coord","_step","_iterator","_createForOfIteratorHelper","toConsumableArray","n","done","err","e","f","p","place","Puzzle","numRows","numColumns","destination","finalMove","exit","selected","pieces","map","copy","idx","findIndex","piece","blocks","i","_context2","length","_step2","_iterator2","dup","push","contains","_this","keyString","_loop","moves","location","available","isCovered","Model","info","id","_id","initialize","_step3","parse","board","parseInt","rows","columns","start","end","allPieces","_iterator3","_step4","_iterator4","locations","_loop2","loc","puzzle","numMoves","showLabels","victory","delta","show","allMoves","availableMoves","includes","m","clone","BOXSIZE","OFFSET","Rectangle","x","y","computeRectangle","redrawCanvas","model","canvasObj","appObj","ctx","getContext","clearRect","maxRC","fillStyle","window","getComputedStyle","backgroundColor","fillRect","shadowColor","forEach","rect","shadowBlur","font","fillText","drawPuzzle","Node","previous","QueueNode","thing","Queue","head","tail","mobileLayout","canvas","Appmain","buttons","position","left","top","upbutton","downbutton","leftbutton","rightbutton","resetbutton","solvebutton","loadbutton","solution","inputPuzzle","inputPuzzleChange","desktopLayout","actualPuzzle","JSON","stringify","name","target","isKeyDown","App","_React$useState","React","useState","_React$useState2","slicedToArray","setModel","_React$useState3","_React$useState4","checked","setChecked","_React$useState5","_React$useState6","solved","setSolved","_React$useState7","_React$useState8","setSolution","_React$useState9","_React$useState10","isInputPuzzleVisible","setInputPuzzleVisible","_React$useState11","_React$useState12","setInputPuzzle","_React$useState13","innerHeight","innerWidth","_React$useState14","setDimensions","layout","useMediaQuery","query","appRef","useRef","canvasRef","useEffect","addEventListener","current","movePieceHandler","newModel","hasWon","filter","victorious","move","updateMoveCount","movePiece","indexOf","result","substring","solveHandler","seen","Map","queue","set","enqueue","directions","isEmpty","dequeue","Controller_createForOfIteratorHelper","d","k","get","solvePuzzle","react_default","a","createElement","style","ref","tabIndex","className","onClick","event","canvasRect","getBoundingClientRect","clientX","clientY","select","selectPiece","onKeyDown","keyCode","onKeyUp","isVictorious","src","alt","numberMoves","type","onChange","setShowLabels","cols","hidden","readOnly","placeholder","console","log","disabled","resetHandler","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61a184c5.chunk.js","sourcesContent":["/**\r\n * Top-level model knows how to navigate to all state.\r\n */\r\n \r\nexport class Coordinate {\r\n  constructor(row, column) {\r\n    this.row = row;\r\n    this.column = column;\r\n  }\r\n}\r\n \r\nexport class MoveType {\r\n  constructor(dr, dc, label) {\r\n    this.deltar = dr;\r\n    this.deltac = dc;\r\n    this.label = label;\r\n  }\r\n  \r\n  static parse(s) {\r\n    if ((s === \"down\")  || (s === \"Down\"))   { return Down; }\r\n    if ((s === \"up\")    || (s === \"Up\"))     { return Up; }\r\n    if ((s === \"left\")  || (s === \"Left\"))   { return Left; }\r\n    if ((s === \"right\") || (s === \"Right\"))  { return Right; }\r\n    \r\n    return NoMove;\r\n  }\r\n}\r\n \r\nexport const Down = new MoveType(1, 0, \"down\");\r\nexport const Up = new MoveType(-1, 0, \"up\");\r\nexport const Left = new MoveType(0, -1, \"left\");\r\nexport const Right = new MoveType(0, 1, \"right\");\r\nexport const NoMove = new MoveType(0, 0, \"*\");  // no move is possible\r\n \r\nexport class Piece {\r\n  constructor(w, h, isWinner, label) {\r\n    this.width = w;\r\n    this.height = h;\r\n    this.isWinner = isWinner;\r\n    this.row = 0;\r\n    this.column = 0;\r\n    this.label = label;\r\n  }\r\n\r\n  place(row, col) {\r\n    this.row = row;\r\n    this.column = col;\r\n  }\r\n  \r\n  move(direction) {\r\n    this.row += direction.deltar;\r\n    this.column += direction.deltac;\r\n  }\r\n  \r\n  equals(other) {\r\n     if (other instanceof Piece) {\r\n        return this.height === other.height && this.width === other.width && this.row === other.row && this.column === other.column;\r\n     }\r\n     \r\n     return false;\r\n  }\r\n  \r\n  location() {\r\n     return new Coordinate(this.row, this.column);\r\n  }\r\n  \r\n  /** Returns a key that represents piece dimensions. */\r\n  key() {\r\n    return \"\" + this.width + this.height;\r\n  }\r\n  \r\n  // return all coordinates for this piece\r\n  *coordinates() {\r\n    for (let r = 0; r < this.height; r++) {\r\n      for (let c = 0; c < this.width; c++) {\r\n        yield new Coordinate(this.row + r, this.column + c);\r\n      } \r\n    }\r\n  }\r\n  \r\n  contains(coord) {\r\n  \tlet cs = [...this.coordinates()];\r\n  \tfor (let c of cs) {\r\n  \t  if (c.row === coord.row && c.column === coord.column) { \r\n  \t    return true; \r\n  \t  } \r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  // used for solving\r\n  copy() {\r\n     let p = new Piece(this.width, this.height, this.isWinner, this.label);\r\n     p.place(this.row, this.column);\r\n     return p;\r\n  }\r\n}\r\n \r\nexport class Puzzle {\r\n\r\n  /** Exit is list of integers [start, end] and refers to columns or rows, based on finalMove. */\r\n  constructor(numRows, numColumns, destination, finalMove, exit) {\r\n     this.numRows = numRows;\r\n     this.numColumns = numColumns;\r\n     this.destination = destination;\r\n     this.finalMove = finalMove;\r\n     this.exit = exit;\r\n     \r\n     this.selected = null;\r\n  }\r\n\r\n  initialize(pieces) {\r\n     // make sure to create NEW Piece objects\r\n     this.pieces = pieces.map(p => p.copy());\r\n  }\r\n  \r\n  hasWon() {\r\n     let idx = this.pieces.findIndex(piece => piece.isWinner);\r\n     return this.destination.row === this.pieces[idx].row && this.destination.column === this.pieces[idx].column;\r\n  }\r\n    \r\n  // return all blocks\r\n  *blocks() {\r\n    for (let i = 0; i < this.pieces.length; i++) {\r\n      yield this.pieces[i];\r\n    }\r\n  }\r\n  \r\n  /** Make a deep copy of this puzzle. */\r\n  clone() {\r\n    let copy = new Puzzle(this.numRows, this.numColumns, this.destination, this.finalMove, this.exit);\r\n    copy.pieces = [];\r\n    for (let p of this.pieces) {\r\n      let dup = p.copy();\r\n      copy.pieces.push(dup);\r\n      if (p === this.selected) {\r\n         copy.selected = dup;\r\n      }\r\n    }\r\n    return copy;\r\n  }\r\n  \r\n  select(piece) {\r\n    this.selected = piece;\r\n  }\r\n  \r\n  isSelected(piece) {\r\n    return piece === this.selected;\r\n  }\r\n  \r\n  /** Determines if any piece in the puzzle covers given coordinate. */\r\n  isCovered(coord) {\r\n    let idx = this.pieces.findIndex(piece => {\r\n\t   return piece.contains(coord);\r\n    });\r\n\r\n    // if we found a piece that covers coordinate, return true; otherwise false.\r\n    return idx >= 0; \r\n  }\r\n  \r\n  /** Return key string that represents board state. */\r\n  key() {\r\n    var keyString = \"\";\r\n    for (let r = 0; r < this.numRows; r++) {\r\n      for (let c = 0; c < this.numColumns; c++) {\r\n        let coord = new Coordinate(r, c);\r\n        let idx = this.pieces.findIndex(piece => {\r\n\t      return piece.contains(coord);\r\n        });\r\n        \r\n        if (idx < 0) { \r\n          keyString += \"00\";   // empty square\r\n        } else {\r\n          keyString += this.pieces[idx].key();\r\n        }\r\n      }\r\n      keyString += \"\\n\";  // easier to read\r\n    }\r\n    \r\n    return keyString;\r\n  }\r\n  \r\n  availableMoves() {\r\n    let p = this.selected;\r\n    if (p == null) { return []; }\r\n    let moves = [];\r\n    let coord = this.selected.location();\r\n     \r\n    // can move left?\r\n    let available = false;\r\n    if (coord.column > 0) {\r\n      available = true;\r\n      for (let r = 0; r < p.height; r++) {\r\n        if (this.isCovered(new Coordinate(coord.row + r, coord.column - 1))) {\r\n          available = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (available) { \r\n      moves.push(Left); \r\n    }\r\n    \r\n    // can move right?\r\n    if (coord.column + p.width < this.numColumns) {\r\n      available = true;\r\n      for (let r = 0; r < p.height; r++) {\r\n        if (this.isCovered(new Coordinate(coord.row + r, coord.column + p.width))) {\r\n          available = false;\r\n          break;\r\n        }\r\n      }\r\n      if (available) { \r\n        moves.push(Right); \r\n      }\r\n    }\r\n    \r\n    // can move up?\r\n    if (coord.row > 0) {\r\n      available = true;\r\n      for (let c = 0; c < p.width; c++) {\r\n        if (this.isCovered(new Coordinate(coord.row - 1, coord.column + c))) {\r\n          available = false;\r\n          break;\r\n        }\r\n      }\r\n      if (available) { \r\n        moves.push(Up); \r\n      }\r\n    }\r\n    \r\n    // can move down?\r\n    if (coord.row + p.height < this.numRows) {\r\n      available = true;\r\n      for (let c = 0; c < p.width; c++) {\r\n        if (this.isCovered(new Coordinate(coord.row + p.height, coord.column + c))) {\r\n          available = false;\r\n          break;\r\n        }\r\n      }\r\n      if (available) { \r\n        moves.push(Down); \r\n      }\r\n    }\r\n    \r\n    return moves;\r\n  }\r\n}\r\n\r\nexport default class Model {\r\n  static _id = 0;  // helpful for debugging. Can be used to show which 'version' Model is being processed\r\n  \r\n  /** Construct a Model for this puzzle information. If info is undefined, then defaults to no-op constructor. */\r\n  constructor(info) {\r\n    this.id = Model._id;\r\n    Model._id += 1;\r\n    \r\n    if (typeof info === 'undefined') { return; }\r\n    \r\n    this.initialize(info);\r\n  }\r\n  \r\n  /** Initializes based on the JSON information. */\r\n  initialize(info) {\r\n    let finalMove = MoveType.parse(info.board.finalMove);\r\n    let numRows = parseInt(info.board.rows);\r\n    let numColumns = parseInt(info.board.columns);\r\n    let destination = new Coordinate(parseInt(info.board.destination.row), parseInt(info.board.destination.column))\r\n    let exit = [parseInt(info.board.exit.start), parseInt(info.board.exit.end)];\r\n    \r\n    var allPieces = [];\r\n    for (let p of info.pieces) {\r\n      allPieces.push(new Piece(parseInt(p.width), parseInt(p.height), (p.isWinner === 'true'), p.label));\r\n    }\r\n    \r\n    for (let loc of info.locations) {\r\n      let coord = new Coordinate (parseInt(loc.location.row), parseInt(loc.location.column));\r\n      let idx = allPieces.findIndex(piece => (piece.label === loc.piece));\r\n      allPieces[idx].place(coord.row, coord.column);\r\n    }\r\n    \r\n    this.puzzle = new Puzzle(numRows, numColumns, destination, finalMove, exit);\r\n    this.puzzle.initialize(allPieces);\r\n    this.numMoves = 0;\r\n    this.showLabels = false;\r\n    this.victory = false;\r\n  }\r\n  \r\n  updateMoveCount(delta) {\r\n    this.numMoves += delta;\r\n  }\r\n  \r\n  setShowLabels(show) {\r\n    this.showLabels = show;\r\n  }\r\n  \r\n  numberMoves() {\r\n    return this.numMoves;\r\n  }\r\n  \r\n  victorious() {\r\n    this.victory = true;\r\n  }\r\n  \r\n  isVictorious() {\r\n    return this.victory;\r\n  }\r\n  \r\n  /** Is it possible to move current selected piece (if one exists) in this direction? */\r\n  available(direction) {\r\n    // if no piece selected? Then none are available.\r\n    if (!this.puzzle.selected) { return false; }\r\n    if (direction === NoMove) { return false; }\r\n    \r\n    let allMoves = this.puzzle.availableMoves();\r\n    \r\n    // HANDLE WINNING CONDITION\r\n    if (this.puzzle.selected.isWinner && this.puzzle.selected.row === this.puzzle.destination.row && this.puzzle.selected.column === this.puzzle.destination.column && this.puzzle.finalMove === direction) {\r\n      return true;\r\n    }\r\n    \r\n    // all others come here...\r\n    return allMoves.includes(direction);\r\n  }\r\n  \r\n  copy() {\r\n    let m = new Model();                 \r\n    m.puzzle = this.puzzle.clone();\r\n    m.numMoves = this.numMoves;\r\n    m.showLabels = this.showLabels;\r\n    m.victory = this.victory;\r\n    return m;\r\n  }\r\n}\r\n\r\n","import {Up, Down, Left, Right } from '../model/Model.js';\r\n\r\n// Scaling Constants for Canvas\r\nvar BOXSIZE = 100;\r\nconst OFFSET = 8;\r\n\r\n/** Represents a rectangle. */\r\nexport class Rectangle {\r\n  constructor(x, y, width, height) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n  \r\n  /** Does the (x,y) point exist within the rectangle. */\r\n  contains(x, y) {\r\n     return x >= this.x && x <= (this.x + this.width) && y >= this.y && y <= (this.y + this.height);\r\n  }\r\n}\r\n\r\n/** Map piece into rectangle in puzzle view. */\r\nexport function computeRectangle(piece) {\r\n  let c = piece.location();\r\n  return new Rectangle(BOXSIZE*c.column + OFFSET, BOXSIZE*c.row + OFFSET, BOXSIZE*piece.width - 2*OFFSET, BOXSIZE*piece.height - 2*OFFSET);\r\n}\r\n\r\n/** Draw puzzle. */\r\nexport function drawPuzzle (ctx, puzzle, showLabels) {\r\n  \r\n  ctx.shadowColor = 'black';\r\n  \r\n  let selected = puzzle.selected;\r\n  \r\n  puzzle.pieces.forEach(piece => {\r\n     let rect = computeRectangle(piece);\r\n     if (piece === selected) {\r\n        ctx.fillStyle = 'yellow';\r\n     } else {\r\n        if (piece.isWinner) {\r\n\t      ctx.fillStyle = 'red';\r\n\t    } else {\r\n\t      ctx.fillStyle = 'lightblue';\r\n\t    }\r\n     }\r\n     \r\n     ctx.shadowBlur = 10;\r\n     ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\r\n     if (showLabels) {\r\n        ctx.font = \"24px Consolas\";\r\n        ctx.fillStyle = 'black';\r\n        ctx.shadowBlur = 0;\r\n        ctx.fillText(piece.label, rect.x + rect.width/2 - 6, rect.y + rect.height/2 + 6);\r\n     }\r\n      \r\n  });\r\n\r\n}\r\n\r\n/** Redraw entire canvas from model. */\r\nexport function redrawCanvas(model, canvasObj, appObj) {\r\n    const ctx = canvasObj.getContext('2d');\r\n \r\n    // clear the canvas area before rendering the coordinates held in state\r\n    ctx.clearRect( 0,0, canvasObj.width, canvasObj.height);  // assume square region\r\n    \r\n    // fill in unnecessary areas.\r\n    let puzzle = model.puzzle;\r\n    let maxRC = puzzle.numRows;\r\n    if (puzzle.numColumns > maxRC) { maxRC = puzzle.numColumns; }\r\n    BOXSIZE = canvasObj.width / maxRC;\r\n    \r\n    if (puzzle.numRows !== maxRC) {\r\n       ctx.fillStyle = window.getComputedStyle(appObj).backgroundColor;\r\n       ctx.fillRect(0, BOXSIZE*puzzle.numRows, canvasObj.width, BOXSIZE*(maxRC - puzzle.numRows));\r\n    } else if (puzzle.numColumns !== maxRC) {\r\n       ctx.fillStyle = window.getComputedStyle(appObj).backgroundColor;\r\n       ctx.fillRect(BOXSIZE*puzzle.numColumns, 0, BOXSIZE*(maxRC - puzzle.numColumns), canvasObj.height);\r\n    }\r\n\r\n    // draw all coordinates held in state\r\n    if (model.puzzle) { \r\n      drawPuzzle (ctx, model.puzzle, model.showLabels);\r\n      \r\n\t  // draw border BUT be sure to leave room for edge.\r\n\t  ctx.fillStyle = 'brown';\r\n\t  ctx.shadowBlur = 0;\r\n\t  \r\n\t  if (puzzle.finalMove === Left) {\r\n\t    let exit = puzzle.exit;\r\n\t    ctx.fillRect(0, 0, OFFSET, (exit[0])*BOXSIZE);\r\n\t    ctx.fillRect(0, (exit[1]+1)*BOXSIZE, OFFSET, (puzzle.numRows-exit[0])*BOXSIZE);\r\n\t  } else {\r\n        ctx.fillRect(0, 0, OFFSET, puzzle.numRows * BOXSIZE);\r\n\t  }\r\n\t  \r\n\t   if (puzzle.finalMove === Right) {\r\n\t    let exit = puzzle.exit;\r\n\t    ctx.fillRect(puzzle.numColumns*BOXSIZE - OFFSET, 0, OFFSET, (exit[0])*BOXSIZE);\r\n\t    ctx.fillRect(puzzle.numColumns*BOXSIZE - OFFSET, (exit[1]+1)*BOXSIZE, OFFSET, (puzzle.numRows-exit[0])*BOXSIZE);\r\n\t  } else {\r\n\t    ctx.fillRect(puzzle.numColumns*BOXSIZE - OFFSET, 0, OFFSET, puzzle.numRows * BOXSIZE);\r\n\t  }\r\n\t  \r\n\t  if (puzzle.finalMove === Down) {\r\n\t    let exit = puzzle.exit;\r\n\t    ctx.fillRect(0, puzzle.numRows*BOXSIZE - OFFSET, (exit[1]-1)*BOXSIZE, OFFSET);\r\n\t    ctx.fillRect((exit[1]+1)*BOXSIZE, puzzle.numRows*BOXSIZE - OFFSET, (puzzle.numColumns-exit[1]-1)*BOXSIZE, OFFSET);\r\n\t  } else {\r\n        ctx.fillRect(0, puzzle.numRows*BOXSIZE - OFFSET, puzzle.numColumns*BOXSIZE, OFFSET);\r\n\t  }\r\n\t  \r\n\t  if (puzzle.finalMove === Up) {\r\n\t    let exit = puzzle.exit;\r\n\t    ctx.fillRect(0, 0, (exit[1]-1)*BOXSIZE, OFFSET);\r\n\t    ctx.fillRect((exit[1]+1)*BOXSIZE, 0, (exit[1]-exit[0])*BOXSIZE, OFFSET);\r\n\t  } else {\r\n        ctx.fillRect(0, 0, puzzle.numColumns * BOXSIZE, OFFSET);\r\n\t  }\r\n    }\r\n  };","import {computeRectangle} from '../boundary/Boundary.js';\r\nimport {Up, Down, Left, Right, NoMove} from '../model/Model.js';\r\n\r\nexport function selectPiece(model, canvas, event) {\r\n    const canvasRect = canvas.getBoundingClientRect();\r\n    \r\n    let idx = model.puzzle.pieces.findIndex(piece => {\r\n       let rect = computeRectangle(piece);\r\n\t   return rect.contains(event.clientX - canvasRect.left, event.clientY - canvasRect.top);\r\n    });\r\n\r\n    let selected = null;\r\n    if (idx >= 0) {\r\n      selected = model.puzzle.pieces[idx];\r\n    } \r\n\r\n    // select this piece! Construct new model to represent this situation.\r\n    model.puzzle.select(selected);\r\n    return model.copy();\r\n}\r\n\r\n/** Deals with winning condition by removing the special piece! */\r\nexport function movePiece(model, direction) {\r\n    let selected = model.puzzle.selected;\r\n    if (!selected) { return model; }\r\n\r\n    if (model.puzzle.hasWon() && direction === model.puzzle.finalMove) {\r\n      model.puzzle.pieces = model.puzzle.pieces.filter(p => p !== selected);\r\n      model.puzzle.selected = null;  // GONE!\r\n      model.victorious();\r\n    } else {\r\n      selected.move(direction);\r\n    }\r\n    \r\n    model.updateMoveCount(+1);\r\n    return model.copy();\r\n}\r\n\r\nclass Node {\r\n  constructor(board, previous, direction) {\r\n    this.board = board;\r\n    this.previous = previous;\r\n    this.direction = direction;\r\n  }\r\n}\r\n\r\nclass QueueNode {\r\n  constructor(thing) {\r\n    this.thing = thing;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass Queue {\r\n  constructor() {\r\n    this.head = null;\r\n    this.tail = null;\r\n  }\r\n  \r\n  isEmpty() {\r\n    return this.head == null;\r\n  }\r\n  \r\n  enqueue(thing) {\r\n    if (this.head == null) {\r\n      this.head = new QueueNode(thing);\r\n      this.tail = this.head;\r\n    } else {\r\n      this.tail.next = new QueueNode(thing);\r\n      this.tail = this.tail.next;\r\n    }\r\n  }\r\n  \r\n  dequeue() {\r\n    if (this.head === this.tail) {\r\n      let thing = this.head.thing;\r\n      this.head = this.tail = null;\r\n      return thing;\r\n    } \r\n    \r\n    let thing = this.head.thing;\r\n    this.head = this.head.next;\r\n    return thing;\r\n  }\r\n}\r\n\r\n/** Solve puzzle and return solution as a string. */\r\nexport function solvePuzzle(model) {\r\n   var seen = new Map()\r\n   var queue = new Queue();\r\n   let copy = model.puzzle.clone();\r\n   var n = new Node(copy, null, NoMove);\r\n   seen.set(copy.key(), true);\r\n   queue.enqueue(n);\r\n   \r\n   const directions = [Up, Down, Left, Right];\r\n   while (!queue.isEmpty()) {\r\n      n = queue.dequeue();\r\n      \r\n      // for each of the pieces in the copy, try to move in each direction\r\n      for (let idx = 0; idx < n.board.pieces.length; idx++) {\r\n        for (let d of directions) {\r\n          let copy = n.board.clone();\r\n          copy.selected = copy.pieces[idx];\r\n          if (copy.availableMoves().includes(d)) {\r\n            copy.selected.move(d);\r\n            var next = new Node(copy, n, d);\r\n            if (copy.hasWon()) {\r\n               // SOLUTION! Work backwards to produce entire solution\r\n               var moves = \"\";\r\n               while (next.previous != null) {\r\n                 moves = next.board.selected.label + \" \" + next.direction.label + \"\\n\" + moves;\r\n                 next = next.previous;\r\n               }\r\n               return moves;\r\n            }\r\n            \r\n            let k = copy.key();\r\n            if (seen.get(k) === true) {\r\n               /* SKIP */\r\n            } else {\r\n               seen.set(k, true);\r\n               queue.enqueue(next);\r\n            }\r\n          }\r\n        }\r\n      }\r\n   }\r\n   \r\n   return \"*No Solution*\";\r\n}\r\n","export const mobileLayout = {\r\n\r\ncanvas : {\r\n  height: \"500\",\r\n  width: \"500\",\r\n},\r\n  \r\nAppmain : {\r\n  backgroundColor: \"#320453\",\r\n  height: \"100vh\",\r\n  width: \"100vw\",\r\n},\r\n  \r\nbuttons: { \r\n  position: \"absolute\",\r\n  left: 150,\r\n  top: 450\r\n},\r\n\r\nupbutton:  {\r\n  position: \"absolute\",\r\n  left: 50,\r\n  top: 80,\r\n},\r\n\r\ndownbutton : {\r\n  position: \"absolute\",\r\n  left: 50,\r\n  top: 120,\r\n},\r\n\r\nleftbutton : {\r\n  position: \"absolute\",\r\n  top: 100,\r\n},\r\n\r\nrightbutton : {\r\n  position: \"absolute\",\r\n  top: 100,\r\n  left: 100,\r\n},\r\n\r\nresetbutton : {\r\n  position: \"absolute\",\r\n  top: 70,\r\n  left: 175,\r\n},\r\n\r\nsolvebutton : {\r\n  position: \"absolute\",\r\n  top: 100,\r\n  left: 175,\r\n},\r\n\r\nloadbutton : {\r\n  position: \"absolute\",\r\n  top: 130,\r\n  left: 175,\r\n},\r\n\r\nsolution : {\r\n  position: \"absolute\",\r\n  top: 600,\r\n  left: 20,\r\n  numRows: 5,\r\n},\r\n\r\ninputPuzzle : {\r\n  position: \"absolute\",\r\n  top: 500,\r\n  left: 520,\r\n},\r\n\r\ninputPuzzleChange : {\r\n  position: \"absolute\",\r\n  top: 500,\r\n  left: 750,\r\n},\r\n};\r\n","export const desktopLayout = {\r\n\r\ncanvas : {\r\n  height: \"500\",\r\n  width: \"500\",\r\n},\r\n\r\nAppmain : {\r\n  backgroundColor: \"#320453\",\r\n  height: \"100vh\",\r\n  width: \"100vw\",\r\n},\r\n  \r\nbuttons: { \r\n  position: \"absolute\",\r\n  left:550,\r\n  top:150\r\n},\r\n\r\nupbutton:  {\r\n  position: \"absolute\",\r\n  left: 50,\r\n  top: 80,\r\n},\r\n\r\ndownbutton : {\r\n  position: \"absolute\",\r\n  left: 50,\r\n  top: 120,\r\n},\r\n\r\nleftbutton : {\r\n  position: \"absolute\",\r\n  top: 100,\r\n},\r\n\r\nrightbutton : {\r\n  position: \"absolute\",\r\n  top: 100,\r\n  left: 100,\r\n},\r\n\r\nresetbutton : {\r\n  position: \"absolute\",\r\n  top: 180,\r\n  left: 35,\r\n},\r\n\r\nsolvebutton : {\r\n  position: \"absolute\",\r\n  top: 220,\r\n  left: 35,\r\n},\r\n\r\nloadbutton : {\r\n  position: \"absolute\",\r\n  top: 260,\r\n  left: 35,\r\n},\r\n\r\nsolution : {\r\n  position: \"absolute\",\r\n  top: 20,\r\n  left: 550,\r\n  numRows: 10,\r\n},\r\n\r\ninputPuzzle : {\r\n  position: \"absolute\",\r\n  top: 500,\r\n  left: 520,\r\n},\r\n\r\ninputPuzzleChange : {\r\n  position: \"absolute\",\r\n  top: 500,\r\n  left: 750,\r\n},\r\n};\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport Model from './model/Model.js';\r\nimport { Up, Down, Left, Right } from './model/Model.js';\r\nimport { redrawCanvas } from './boundary/Boundary.js';\r\nimport { movePiece, selectPiece, solvePuzzle} from './controller/Controller.js';\r\n\r\nimport { mobileLayout } from './Mobile.js';\r\nimport { desktopLayout } from './Desktop.js';\r\n\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\n// default puzzle to use\r\nimport { puzzleInformation } from './model/Puzzle.js'; \r\n\r\nvar actualPuzzle = JSON.parse(JSON.stringify(puzzleInformation));   // parses string into JSON object, used below.\r\n\r\n// Used to record when key is pressed, since there will be duplicate events generated,\r\n// and we only want to process the first one.\r\nvar isKeyDown = false;\r\n\r\nfunction App() {\r\n  const [model, setModel] = React.useState(new Model(actualPuzzle));\r\n  const [checked, setChecked] = React.useState(false);\r\n  const [solved, setSolved] = React.useState(false);\r\n  const [solution, setSolution] = React.useState(\"\");\r\n  const [isInputPuzzleVisible, setInputPuzzleVisible] = React.useState(false);\r\n  const [inputPuzzle, setInputPuzzle] = React.useState(\"\");\r\n  \r\n  const [dimensions, setDimensions] = React.useState({\r\n    height: window.innerHeight,\r\n    width: window.innerWidth\r\n  })\r\n  \r\n  const isDesktopOrLaptop = useMediaQuery({ query: '(min-width: 900px)' })\r\n  \r\n  const layout = isDesktopOrLaptop ? desktopLayout : mobileLayout;\r\n    \r\n  const appRef = React.useRef(null);      // need to be able to refer to App to get background color in Boundary\r\n  const canvasRef = React.useRef(null);   // need to be able to refer to Canvas\r\n\r\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\r\n  React.useEffect (() => {\r\n    function handleResize() {\r\n      setDimensions({\r\n        height:window.innerHeight,\r\n        width: window.innerWidth\r\n      })\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    /** Happens once. */\r\n    redrawCanvas(model, canvasRef.current, appRef.current);\r\n  }, [model])   // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\r\n\r\n  const toggleVisibility = () => {\r\n    setInputPuzzleVisible(!isInputPuzzleVisible);\r\n  };\r\n\r\n  const updatePuzzle = (e) => {\r\n    setInputPuzzle(e.target.value);\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    let newModel = selectPiece(model, canvasRef.current, e);\r\n    setModel(newModel);   // react to changes, if model has changed.\r\n  }\r\n  \r\n  const movePieceHandler = (direction) => {\r\n    let newModel = movePiece(model, direction);\r\n    if (solved) {\r\n      let idx = solution.indexOf(\"\\n\"); // extract first move\r\n      let result = solution.substring(idx+1);\r\n      setSolution(result);\r\n      if (result.length === 0) { setSolved(false); } // remove the text solution....\r\n    }\r\n    setModel(newModel);   // react to changes, if model has changed.\r\n  }\r\n  \r\n  const handleKeyUpEvent = (e) => {\r\n    isKeyDown = false;\r\n  }\r\n  \r\n  const handleKeyDownEvent = (e) => { \r\n     if (isKeyDown) { return; }\r\n     isKeyDown = true;\r\n     \r\n     var direction = null;\r\n     if (e.keyCode === 37 && model.available(Left)) { direction = Left; }\r\n     else if (e.keyCode === 38 && model.available(Up)) { direction = Up; }\r\n     else if (e.keyCode === 39 && model.available(Right)) { direction = Right; }\r\n     else if (e.keyCode === 40 && model.available(Down)) { direction = Down; }\r\n     if (direction) { movePieceHandler(direction); } \r\n  }\r\n  \r\n  const resetHandler = () => {\r\n    let m = new Model(actualPuzzle);\r\n    setModel(m);                    // react to changes since model has changed.\r\n    setChecked(false);\r\n  }\r\n\r\n  const solveHandler = () => {\r\n    // if previously not solved, this makes it visible and records the solution.\r\n    if (!solved) {\r\n        let moves = solvePuzzle(model);\r\n    \tsetSolution(moves);\r\n    }\r\n    \r\n    setSolved(!solved);\r\n  }\r\n  \r\n  const changePuzzle = (e) => {\r\n    setInputPuzzleVisible(!isInputPuzzleVisible);\r\n    actualPuzzle = JSON.parse(inputPuzzle);\r\n    try {\r\n      let m = new Model(actualPuzzle)\r\n      setModel(m);\r\n      setChecked(false);\r\n    } catch (err) {\r\n      console.log(\"Problem parsing input:\" + err);\r\n    }\r\n  }\r\n\r\n  const handleCheckChange = () => {\r\n     setChecked(!checked);\r\n     model.setShowLabels(!checked);\r\n     setModel(model.copy());        // force redraw\r\n  }\r\n \r\n  // top-level application\r\n  return (\r\n    <main style={layout.Appmain} ref={appRef}>\r\n       {/* Allows key events, with tabIndex */}\r\n      <canvas tabIndex=\"1\"  \r\n        className=\"App-canvas\"\r\n        ref={canvasRef}\r\n        width={layout.canvas.width}\r\n        height={layout.canvas.height}\r\n        onClick={handleClick} onKeyDown={handleKeyDownEvent} onKeyUp={handleKeyUpEvent} />\r\n      \r\n      {/* Using '?' construct is proper React way to make image visible only when victorious. */}  \r\n      { model.isVictorious() ? ( <img src={'/fireworks.apng'} alt=\"fireworks\" /> ) : null }\r\n\r\n      <p className=\"nummoves\">#Moves: {model.numberMoves()}</p>\r\n      <label className=\"showlabels\"><input type=\"checkbox\" checked={checked} onChange={handleCheckChange}/>Show Labels</label>\r\n\r\n      <textarea style={layout.solution} value={solution} rows={layout.solution.numRows} cols={10} hidden={!solved} readOnly></textarea>\r\n      <textarea style={layout.inputPuzzle} placeholder=\"Enter JSON here\" rows={5} onChange={updatePuzzle} hidden={!isInputPuzzleVisible}></textarea>\r\n      { isInputPuzzleVisible ? ( <button style={layout.inputPuzzleChange} onClick={changePuzzle} hidden={isInputPuzzleVisible}>Change Puzzle</button> ) : null }\r\n      \r\n      {/* Group buttons together */}\r\n      <div style={layout.buttons}>\r\n        <button style={layout.upbutton}    onClick={(e) => movePieceHandler(Up)}    disabled={!model.available(Up)}    >^</button>\r\n        <button style={layout.leftbutton}  onClick={(e) => movePieceHandler(Left)}  disabled={!model.available(Left)}  >&lt;</button>\r\n        <button style={layout.rightbutton} onClick={(e) => movePieceHandler(Right)} disabled={!model.available(Right)} >&gt;</button>\r\n        <button style={layout.downbutton}  onClick={(e) => movePieceHandler(Down)}  disabled={!model.available(Down)}  >v</button> \r\n        \r\n        <button style={layout.resetbutton} onClick={(e) => resetHandler()} >Reset</button>\r\n        <button style={layout.solvebutton} onClick={(e) => solveHandler()} >Solve</button>\r\n        <button style={layout.loadbutton}  onClick={toggleVisibility} >Load&nbsp;</button>\r\n        \r\n      </div>\r\n    </main>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","export const puzzleInformation = \r\n{\r\n  \"name\": \"WoodPuzzle 4x5\",\r\n  \"board\" : {\r\n     \"rows\" : \"5\",\r\n     \"columns\" : \"4\",\r\n     \"target\" : \"B\",\r\n     \"destination\" : {\r\n       \"row\" : \"3\",\r\n       \"column\" : \"1\"\r\n     },\r\n     \"exit\" : {\r\n       \"start\"    : \"1\",\r\n       \"end\"      : \"2\"\r\n     },\r\n     \"finalMove\" : \"Down\"\r\n  },\r\n  \"pieces\" : [\r\n    { \"label\" : \"A\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"2\"\r\n    },\r\n    { \"label\" : \"B\",\r\n      \"isWinner\" : \"true\",\r\n      \"width\" : \"2\",\r\n      \"height\" : \"2\"\r\n    },\r\n    { \"label\" : \"C\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"2\"\r\n    },\r\n    { \"label\" : \"D\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"2\"\r\n    },\r\n    { \"label\" : \"E\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"F\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"G\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"2\"\r\n    },\r\n    { \"label\" : \"H\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"I\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"J\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"2\",\r\n      \"height\" : \"1\"\r\n    }\r\n  ],\r\n  \"locations\" : [\r\n    { \"piece\" : \"A\",\r\n      \"location\" : {\r\n         \"row\"    : \"0\", \r\n         \"column\" : \"0\" \r\n      }\r\n    },\r\n    { \"piece\" : \"B\",\r\n      \"location\" : {\r\n         \"row\"    : \"0\", \r\n         \"column\" : \"1\" \r\n      }\r\n    },\r\n    { \"piece\" : \"C\",\r\n      \"location\" : {\r\n         \"row\"    : \"0\", \r\n         \"column\" : \"3\" \r\n      }\r\n    },\r\n    { \"piece\" : \"D\",\r\n      \"location\" : {\r\n         \"row\"    : \"2\", \r\n         \"column\" : \"0\" \r\n      }\r\n    },\r\n    { \"piece\" : \"E\",\r\n      \"location\" : {\r\n         \"row\"    : \"2\", \r\n         \"column\" : \"1\" \r\n      }\r\n    },\r\n    { \"piece\" : \"F\",\r\n      \"location\" : {\r\n         \"row\"    : \"2\", \r\n         \"column\" : \"2\" \r\n      }\r\n    },\r\n    { \"piece\" : \"G\",\r\n      \"location\" : {\r\n         \"row\"    : \"2\", \r\n         \"column\" : \"3\" \r\n      }\r\n    },\r\n    { \"piece\" : \"H\",\r\n      \"location\" : {\r\n         \"row\"    : \"3\", \r\n         \"column\" : \"1\" \r\n      }\r\n    },\r\n    { \"piece\" : \"I\",\r\n      \"location\" : {\r\n         \"row\"    : \"3\", \r\n         \"column\" : \"2\" \r\n      }\r\n    },\r\n    { \"piece\" : \"J\",\r\n      \"location\" : {\r\n         \"row\"    : \"4\", \r\n         \"column\" : \"1\" \r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nexport const puzzleInformationExtra = \r\n{\r\n  \"name\": \"WoodPuzzle 6x6\",\r\n  \"board\" : {\r\n     \"rows\" : \"6\",\r\n     \"columns\" : \"6\",\r\n     \"target\" : \"A\",\r\n     \"destination\" : {\r\n       \"row\" : \"2\",\r\n       \"column\" : \"4\"\r\n     },\r\n     \"exit\" : {\r\n       \"start\"    : \"2\",\r\n       \"end\"      : \"2\"\r\n     },\r\n     \"finalMove\" : \"Right\"\r\n  },\r\n  \"pieces\" : [\r\n    { \"label\" : \"A\",\r\n      \"isWinner\" : \"true\",\r\n      \"width\" : \"2\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"B\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"2\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"C\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"3\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"D\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"2\"\r\n    },\r\n    { \"label\" : \"E\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"1\",\r\n      \"height\" : \"3\"\r\n    },\r\n    { \"label\" : \"F\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"2\",\r\n      \"height\" : \"1\"\r\n    },\r\n    { \"label\" : \"G\",\r\n      \"isWinner\" : \"false\",\r\n      \"width\" : \"2\",\r\n      \"height\" : \"1\"\r\n    }\r\n  ],\r\n  \"locations\" : [\r\n    { \"piece\" : \"A\",\r\n      \"location\" : {\r\n         \"row\"    : \"2\", \r\n         \"column\" : \"0\" \r\n      }\r\n    },\r\n    { \"piece\" : \"B\",\r\n      \"location\" : {\r\n         \"row\"    : \"0\", \r\n         \"column\" : \"2\" \r\n      }\r\n    },\r\n    { \"piece\" : \"C\",\r\n      \"location\" : {\r\n         \"row\"    : \"1\", \r\n         \"column\" : \"1\" \r\n      }\r\n    },\r\n    { \"piece\" : \"D\",\r\n      \"location\" : {\r\n         \"row\"    : \"2\", \r\n         \"column\" : \"3\" \r\n      }\r\n    },\r\n    { \"piece\" : \"E\",\r\n      \"location\" : {\r\n         \"row\"    : \"3\", \r\n         \"column\" : \"1\" \r\n      }\r\n    },\r\n    { \"piece\" : \"F\",\r\n      \"location\" : {\r\n         \"row\"    : \"4\", \r\n         \"column\" : \"2\" \r\n      }\r\n    },\r\n    { \"piece\" : \"G\",\r\n      \"location\" : {\r\n         \"row\"    : \"4\", \r\n         \"column\" : \"4\" \r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}